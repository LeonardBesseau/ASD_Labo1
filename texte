Fonction 1
Meilleur cas O(1)
Pire cas O(n)
Cas Moyen O(n) // (n/2)

Function 2
Meilleur cas O(n^2)
Pire cas O(n^2)
Cas Moyen O(n^2)
n-1 comparsion par élément
La fonction effectue le me nombre de comparaison,
peut-importe comment les données sont ordonnées

Fonction 3
Recherche dicotomique
Meilleur cas O(1)
Le log est un log en base 2
A chaque iteration , le nombre de éléments possible est divisé par 2
==> log en base 2

// Nombre de fois pour arriver à 1 élément équivalent à
n/2^k = 1 <==> 2^k = n <==> log(2^k) = log(n) <==> k = log(n)
// log(2) = 1
Pire cas O(log(n))
Cas Moyen O(log(n))

exemple avec un tableau de 15 éléments
indexé ainsi [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
iter 1 A[7] ~6.25%
iter 2 A[3], A[11] ~12.5%
iter 3 A[1], A[5], A[9], A[13] ~25%
iter 4 A[0], A[2], A[4], A[6], A[8], A[10], A[12], A[14]

iter 1 : 1/n (un seul cas possible)
iter 2 : 2/n (2 cas possible)
iter 3 : 4/n
iter 4 : 8/n
==>
iter n : 2^(x-1)/n
Ce qui fait que environ la moitié des éléments sont trouvés avec la derniere iteration
==> cas moyen = Pire cas = log(n)

Fonction 4
Meilleur cas O(1)
Pire cas O(3^n)
Cas Moyen O(3^n)

F(0) = 1
F(1) = F(0)+F(0)+F(0) = 3*F(0)
F(1) = F(1)+F(1)+F(1) = 3*F(1) = 9*F(0)
F(n) = 3*F(n-1)
F(n) = 3*3*F(n-2)
F(n) = 3^k*F(n-k)
F(n) = 3^n*F(0)
F(n) = 3^n

temps mesuré pour chaque calcul (A part le premier, on peut voir une augmentation exponentielle)
0 : 187
1 : 57
2 : 91
3 : 225
4 : 370
5 : 865
6 : 2031
7 : 26102
8 : 17561
9 : 103993
10 : 189534
11 : 493855
12 : 1.37854e+06
13 : 4.02757e+06
14 : 1.2134e+07
15 : 3.59394e+07
16 : 1.09465e+08
17 : 3.28443e+08
18 : 9.59672e+08
19 : 2.87414e+09


Fonction 5

******************** PAS SUR A VERIFIER **************************************************************************

Meilleur cas O(n*log(n))
Pire cas O(n*log(n))
Cas Moyen O(n*log(n))

Log(n) + log(n-1) + log(n-2) + log(n-3) + log (n-4)
log(n!)

Fonction 6
Meilleur cas O(n)
Pire cas O(n+m) // ou n+m
Cas Moyen O(n)

l'opération est effecuté n fois
En temps normal, rien de special mais lorsque push back realloue des resources
ce qui transforme l'opération en linéaire et non constante

Fonction 7
Meilleur cas O(n^2)
Pire cas O(n^2)
Cas Moyen O(n^2)
